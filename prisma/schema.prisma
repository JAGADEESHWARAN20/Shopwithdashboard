// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Role enum for the User model
enum Role {
  ADMIN
  CUSTOMER
}

// User model
model User {
  id            String      @id @default(uuid()) @map("_id")
  email         String      @unique // User's email (used for login)
  password      String?     // Hashed password (optional if using Clerk)
  name          String?     // User's name
  role          Role        @default(CUSTOMER) // Role of the user (ADMIN or CUSTOMER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified Boolean     @default(false) // Whether the user's email is verified
  phone         String?     // User's phone number (optional)
  address       String?     // User's address (optional)
  image         String?     // URL to the user's profile image (optional)

  // Relationships
  stores        Store[]     @relation("UserToStore") // A user can own multiple stores
  orders        Order[]     @relation("UserToOrder") // A user can have multiple orders
  cart          Cart?       @relation("UserToCart")  // A user can have one cart
  sessions      Session[]   @relation("UserToSession") // A user can have multiple sessions
}

// Session model (for authentication)
model Session {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   // Foreign key to the User
  user      User     @relation("UserToSession", fields: [userId], references: [id])
  token     String   @unique // JWT or session token
  expiresAt DateTime // When the session expires
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Cart model (related to User)
model Cart {
  id        String     @id @default(uuid()) @map("_id")
  userId    String     @unique // added unique attribute
  user      User       @relation("UserToCart", fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  cartItems CartItem[] @relation("CartToCartItem")
}

//CartItem and the rest of your models.
model CartItem {
  id        String    @id @default(uuid()) @map("_id")
  cartId    String    // Foreign key to the Cart
  cart      Cart      @relation("CartToCartItem", fields: [cartId], references: [id])
  productId String    // Foreign key to the Product
  product   Product   @relation("ProductToCartItem", fields: [productId], references: [id])
  quantity  Int       // Quantity of the product in the cart
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([cartId])
  @@index([productId])
}

// Store model (updated to include relationship with User)
model Store {
  id              String      @id @default(uuid()) @map("_id")
  name            String
  userId          String      // Foreign key to the User who owns the store
  user            User        @relation("UserToStore", fields: [userId], references: [id]) // Added relation
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[]  @relation("StoreToCategory")
  sizes           Size[]      @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  products        Product[]   @relation("StoreToProduct")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isActive        Boolean     @default(true)
  razorpayWebhookId String?
  alternateUrls   String[]    @default([])
  storeUrl        String?

  @@index([userId])
}

// Billboard model
model Billboard {
  id         String     @id @default(uuid()) @map("_id")
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  isFeatured Boolean?

  @@index([storeId])
}

// Category model
model Category {
  id          String    @id @default(uuid()) @map("_id")
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

// Size model
model Size {
  id        String    @id @default(uuid()) @map("_id")
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

// Color model
model Color {
  id        String    @id @default(uuid()) @map("_id")
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Product model (updated to include relationship with CartItem)
model Product {
  id         String      @id @default(uuid()) @map("_id")
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  cartItems  CartItem[]  @relation("ProductToCartItem") // Added relation
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

// Image model
model Image {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// Order model (updated to include relationship with User)
model Order {
  id            String      @id @default(uuid()) @map("_id")
  storeId       String
  store         Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  userId        String?     // Foreign key to the User who placed the order (optional for guest checkout)
  user          User?       @relation("UserToOrder", fields: [userId], references: [id]) // Added relation
  orderItems    OrderItem[]
  isPaid        Boolean     @default(false)
  phone         String      @default("")
  address       String      @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  name          String      @default("")
  email         String      @default("")
  age           Int         @default(0)
  location      String      @default("")
  deliveredTime DateTime?

  @@index([storeId])
  @@index([userId])
}

// OrderItem model
model OrderItem {
  id        String  @id @default(uuid()) @map("_id")
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}